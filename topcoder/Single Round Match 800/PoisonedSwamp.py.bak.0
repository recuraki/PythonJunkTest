# -*- coding: utf-8 -*-
import math,string,itertools,fractions,heapq,collections,re,array,bisect
import heapq
from collections import deque
class dijkstra():
    INF = 2 ** 31 + 10000
    def __init__(self, numV):
        self.numV = numV
        self.e = [[] for _ in range(numV)]

    def makeEdge(self, s, t, cost):
        self.e[s].append((t, cost))

    def solve(self, nodeS, nodeT):
        self.distance = [self.INF] * self.numV
        self.cost = [self.INF] * self.numV # cost
        self.parent = [-1] * self.numV # parent node

        q = [(0, nodeS)]  # 初期ノード(cost 0)
        self.cost[nodeS] = 0
        heapq.heapify(q)
        while len(q) > 0:
            curcost, curnode = heapq.heappop(q)
            #if curcost > self.cost[curnode]:
            #    continue
            for nextnode, edgecost in self.e[curnode]:
                nextcost = curcost + edgecost
                if self.cost[nextnode] > nextcost:
                    self.cost[nextnode] = nextcost
                    self.parent[nextnode] = curnode
                    heapq.heappush(q, (nextcost, nextnode))

    def findRoute(self, s, t):
        # THIS FUNCTION should be called after solve()
        route = deque([])
        nextnode = t
        while nextnode != -1:
            route.appendleft(str(nextnode))
            nextnode = self.parent[nextnode]
        return route

class PoisonedSwamp:
    def cross(self, maze):
        INF = 1000000
        mapSize = 410
        print(maze)

        h = len(maze)
        w = len(maze[0])
        table = [[INF] * (mapSize) for _ in range(mapSize)]
        for i in range(mapSize):
            table[i][i] = 0
        def map2floyd(hhh, yyy):
            return hhh*20 + yyy

        dh = [-1, 0, 0, 1]
        dw = [0, -1, 1, 0]
        test=""
        test.isdigit()

        for hh in range(h):
            for ww in range(w):
                if maze[hh][ww] == "#":
                    continue
                curCost = 0
                if maze[hh][ww].isdigit():
                    curCost = int(maze[hh][ww])
                for di in range(len(dw)):
                    nh = hh + dh[di]
                    nw = ww + dw[di]
                    if nh < 0 or (h - 1) < nh:
                        continue
                    if nw < 0 or (w - 1) < nw:
                        continue
                    if maze[nh][nw] == "#":
                        continue
                    table[map2floyd(nh, nw)][map2floyd(hh, ww)] = curCost

        for k in range(mapSize):
            for i in range(mapSize):
                for j in range(mapSize):
                    table[i][j] = min(table[i][j], table[i][k] + table[k][j])
        #print(table)


# CUT begin
# TEST CODE FOR PYTHON {{{
import sys, time, math

def tc_equal(expected, received):
    try:
        _t = type(expected)
        received = _t(received)
        if _t == list or _t == tuple:
            if len(expected) != len(received): return False
            return all(tc_equal(e, r) for (e, r) in zip(expected, received))
        elif _t == float:
            eps = 1e-9
            d = abs(received - expected)
            return not math.isnan(received) and not math.isnan(expected) and d <= eps * max(1.0, abs(expected))
        else:
            return expected == received
    except:
        return False

def pretty_str(x):
    if type(x) == str:
        return '"%s"' % x
    elif type(x) == tuple:
        return '(%s)' % (','.join( (pretty_str(y) for y in x) ) )
    else:
        return str(x)

def do_test(swamp, __expected):
    startTime = time.time()
    instance = PoisonedSwamp()
    exception = None
    try:
        __result = instance.cross(swamp);
    except:
        import traceback
        exception = traceback.format_exc()
    elapsed = time.time() - startTime   # in sec

    if exception is not None:
        sys.stdout.write("RUNTIME ERROR: \n")
        sys.stdout.write(exception + "\n")
        return 0

    if tc_equal(__expected, __result):
        sys.stdout.write("PASSED! " + ("(%.3f seconds)" % elapsed) + "\n")
        return 1
    else:
        sys.stdout.write("FAILED! " + ("(%.3f seconds)" % elapsed) + "\n")
        sys.stdout.write("           Expected: " + pretty_str(__expected) + "\n")
        sys.stdout.write("           Received: " + pretty_str(__result) + "\n")
        return 0

def run_tests():
    sys.stdout.write("PoisonedSwamp (750 Points)\n\n")

    passed = cases = 0
    case_set = set()
    for arg in sys.argv[1:]:
        case_set.add(int(arg))

    with open("PoisonedSwamp.sample", "r") as f:
        while True:
            label = f.readline()
            if not label.startswith("--"): break

            swamp = []
            for i in range(0, int(f.readline())):
                swamp.append(f.readline().rstrip())
            swamp = tuple(swamp)
            f.readline()
            __answer = f.readline().rstrip()

            cases += 1
            if len(case_set) > 0 and (cases - 1) in case_set: continue
            sys.stdout.write("  Testcase #%d ... " % (cases - 1))
            passed += do_test(swamp, __answer)

    sys.stdout.write("\nPassed : %d / %d cases\n" % (passed, cases))

    T = time.time() - 1613237821
    PT, TT = (T / 60.0, 75.0)
    points = 750 * (0.3 + (0.7 * TT * TT) / (10.0 * PT * PT + TT * TT))
    sys.stdout.write("Time   : %d minutes %d secs\n" % (int(T/60), T%60))
    sys.stdout.write("Score  : %.2f points\n" % points)

if __name__ == '__main__':
    run_tests()

# }}}
# CUT end
