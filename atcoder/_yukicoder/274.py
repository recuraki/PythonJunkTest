import sys
from io import StringIO
import unittest
import logging
logging.basicConfig(level=logging.DEBUG)

def resolve():
    import sys

    sys.setrecursionlimit(20000)

    from collections import deque
    # a-zに正方向と逆辺を張る
    def addEdge(g, a, z):
        g[0][a].append(z)
        g[1][z].append(a)
        #g[0][z].append(a)
        #g[1][a].append(z)

    # グラフの初期化
    def initGraph(g, edgenum):
        g.append([])  # [0] 正方向のグラフ
        g.append([])  # [1] 逆方向のグラフ
        for _ in range(edgenum):
            g[0].append(deque(list()))
        for _ in range(edgenum):
            g[1].append(deque(list()))

    def dfs(g, v, visited, vs):
        # 正方向のDFS
        visited[v] = True
        for i in range(len(g[0][v])):
            if visited[g[0][v][i]] is False:
                dfs(g, g[0][v][i], visited, vs)
        vs.append(v)

    def rdfs(g, v, visited, cmp, k):
        # 逆方向のDFS
        # kがcall元に指定される連結成分の通し番号
        visited[v] = True
        cmp[v] = k
        # 指定したノードの逆辺をたどる
        for i in range(len(g[1][v])):
            # print("go? {0}".format(g[1][v][i]))
            # 逆辺の先がrDFSで到達できないときのみ
            if visited[g[1][v][i]] is False:
                # print("yes")
                rdfs(g, g[1][v][i], visited, cmp, k)

    def scc(g, cmp):
        vs = []  # 帰りがけのリスト
        visited = [False] * len(g[0])
        cmp.extend([None] * len(g[0]))
        for i in range(len(g[0])):
            if visited[i] is False:
                dfs(g, i, visited, vs)

        visited = [False] * len(g[1])
        k = 0
        # pprint(vs)
        for i in range(len(vs) - 1, -1, -1):
            # print("vited: i={0} vs[i] = {1}".format(i, vs[i]))
            # print(visited)
            if visited[vs[i]] is False:
                # print("rdfs [{0}]".format(i))
                rdfs(g, vs[i], visited, cmp, k)
                k += 1
        # pprint(vs)
        return k


    n, m = map(int, input().split())
    dat = []
    for _ in range(n):
        a,b = map(int, input().split())
        dat.append((a,b))

    vCount = n * 2  # 各xとnot x分で2倍
    # 0-n-1が各要素のx, n - n*2-1がnot x の 領域

    g = []  # グラフ。[0] = 正方向のグラフ。 [1] = 逆方向のグラフ
    cmp = []

    from pprint import pprint
    initGraph(g, edgenum=vCount)

    def isSafe(a, b, c, d):
        a,b,c,d = min(a,b), max(a,b), min(c,d), max(c,d)
        #print("{0} {1} {2} {3}".format(a,b,c,d))
        if a < c and b < c:
            #print("T")
            return True
        if a > d and b > d:
            #print("T2")
            return True
        #print("{0} {1} {2} {3}".format(a,b,c,d))
        #print("F")
        return False

    for i in range(n):
        pi = i - 1
        if pi > -1:
            if isSafe(dat[i][0], dat[i][1], dat[pi][0], dat[pi][1]) is False:
                addEdge(g, n + i, n + pi)
            if isSafe(m - dat[i][0], m - dat[i][1], dat[pi][0], dat[pi][1]) is False:
                addEdge(g, i, n + pi)
            if isSafe(dat[i][0], dat[i][1], m - dat[pi][0], m - dat[pi][1]) is False:
                addEdge(g, n + i, pi)
            if isSafe(m - dat[i][0], m - dat[i][1], m - dat[pi][0], m - dat[pi][1]) is False:
                addEdge(g, i, pi)
        pi = i + 1
        if pi < n:
            if isSafe(dat[i][0], dat[i][1], dat[pi][0], dat[pi][1]) is False:
                addEdge(g, n + i, n + pi)
            if isSafe(m - dat[i][0], m - dat[i][1], dat[pi][0], dat[pi][1]) is False:
                addEdge(g, i, n + pi)
            if isSafe(dat[i][0], dat[i][1], m - dat[pi][0], m - dat[pi][1]) is False:
                addEdge(g, n + i, pi)
            if isSafe(m - dat[i][0], m - dat[i][1], m - dat[pi][0], m - dat[pi][1]) is False:
                addEdge(g, i, pi)

    k = scc(g, cmp)
    #pprint(g)
    f = True
    for i in range(n):
        if cmp[i] == cmp[n+i]:
            print("hit{0} {1}, by {2} {3}".format(cmp[i], cmp[n+i], i, n+i))
            f = False
            break
    #print(cmp)
    print("YES" if f else "NO")


class TestClass(unittest.TestCase):

    def assertIO(self, input, output):
        stdout, stdin = sys.stdout, sys.stdin
        sys.stdout, sys.stdin = StringIO(), StringIO(input)
        resolve()
        sys.stdout.seek(0)
        out = sys.stdout.read()[:-1]
        sys.stdout, sys.stdin = stdout, stdin
        self.assertEqual(out, output)
    def test_input_1(self):
        print("test_input_1")
        input = """4 6
5 5
2 3
4 4
1 1"""
        output = """YES"""
        self.assertIO(input, output)
    def test_input_2(self):
        self.maxDiff=10000
        print("test_input_2")
        input = """4 6
3 5
3 4
4 4
1 2"""
        output = """NO"""
        self.assertIO(input, output)

    def test_input_3(self):
        print("test_input_3")
        input = """12 1009
632 683
895 962
841 884
22 23
900 1007
973 984
325 441
358 700
919 1006
510 555
975 990
574 600"""
        output = """NO"""
        self.assertIO(input, output)
    def test_input_4(self):
        print("test_input_4")
        self.maxDiff=40000

        input = """2000 4000
2603 2604
3677 3677
1830 1830
1000 1000
921 923
2533 2533
1865 1865
2015 2016
2799 2799
419 419
64 65
896 896
2847 2847
2165 2166
3690 3690
3587 3588
2585 2585
2726 2726
1547 1548
2229 2229
1939 1939
923 924
2861 2861
2675 2677
2470 2470
1266 1266
374 374
1860 1860
1106 1107
3384 3385
2105 2106
2295 2295
3803 3803
3869 3871
125 126
3760 3760
2895 2895
1442 1442
417 417
655 655
364 365
922 922
2650 2650
2449 2449
2571 2573
1662 1663
616 616
2262 2262
3527 3528
2517 2517
1883 1883
1299 1299
327 329
978 978
2938 2940
2776 2777
3756 3756
1286 1287
1045 1045
2183 2184
2159 2159
2043 2043
1724 1724
605 608
215 216
1648 1650
3770 3770
2486 2489
557 558
1037 1042
810 811
205 206
2800 2801
2294 2294
2977 2977
249 250
3568 3568
2843 2843
2849 2850
3766 3767
3289 3290
3876 3878
1019 1019
258 258
2630 2631
3621 3624
3638 3639
2366 2366
613 613
3513 3514
2635 2636
2858 2860
295 296
630 630
608 609
145 145
3663 3664
977 977
2170 2171
692 695
284 285
2923 2926
2113 2114
644 644
1987 1987
1725 1726
892 893
1326 1326
3168 3168
84 85
749 749
3603 3604
3978 3978
1097 1098
2021 2023
1390 1392
797 797
1613 1615
3343 3343
1519 1519
2333 2334
383 384
1990 1990
866 867
3462 3462
3347 3348
1727 1729
2778 2779
252 253
1515 1515
846 846
3887 3888
3365 3366
1450 1450
275 280
1852 1853
592 592
238 241
213 213
1938 1938
2535 2539
1633 1634
115 117
3637 3637
3944 3946
2216 2216
3041 3044
46 47
1024 1024
2100 2100
1806 1806
69 70
2465 2465
3563 3566
1936 1936
784 784
2909 2910
1385 1386
3661 3662
1884 1885
715 715
3675 3675
2177 2179
3287 3289
2594 2595
3525 3525
2718 2720
2148 2149
2652 2652
2870 2871
481 482
2713 2713
3372 3372
2800 2800
3921 3921
2550 2550
102 102
1998 2001
2242 2242
563 563
2668 2668
3150 3150
3169 3169
818 819
1503 1503
53 54
3775 3777
3443 3443
3203 3204
1690 1691
805 805
526 526
373 373
2077 2077
1409 1410
1061 1063
735 736
2002 2002
274 274
2283 2284
3746 3747
3627 3628
3014 3017
3751 3752
598 598
699 701
3241 3241
470 470
2317 2319
719 720
3380 3381
2211 2211
2286 2287
2165 2165
448 450
1527 1528
1055 1055
2039 2039
900 901
2751 2752
2554 2554
2851 2851
2883 2884
3409 3409
3882 3882
3687 3687
1198 1198
3658 3659
2931 2931
1246 1246
2586 2587
623 623
2731 2731
2174 2175
2085 2087
2774 2774
796 796
1765 1767
2634 2635
979 981
2728 2729
1887 1888
2503 2504
2289 2290
2345 2345
2138 2138
725 725
174 175
1375 1378
282 282
2047 2048
3256 3257
2100 2100
484 485
3062 3062
2013 2013
3470 3471
1402 1403
217 219
3132 3132
3700 3703
2414 2414
1494 1494
903 905
2902 2902
1471 1471
2011 2012
1898 1898
647 648
1675 1675
103 103
2009 2009
847 850
578 580
3033 3035
3619 3619
2135 2135
3423 3424
1442 1443
3251 3251
65 65
3301 3301
1408 1410
2104 2104
1590 1592
2056 2056
993 993
1511 1511
787 788
1187 1189
928 930
1069 1069
2417 2419
1958 1958
3178 3178
2855 2855
699 700
3308 3308
842 843
2189 2190
2104 2105
1065 1067
1995 1995
1900 1902
1437 1437
1755 1756
439 439
2147 2147
3125 3125
3924 3924
3327 3331
617 617
2361 2362
1561 1563
2950 2952
2497 2501
1243 1244
2107 2108
952 954
3365 3368
2362 2364
2941 2942
2291 2293
2733 2734
3846 3846
1734 1735
3448 3450
140 141
1710 1711
251 251
2090 2091
1030 1031
3179 3179
3100 3100
255 255
3881 3881
1343 1343
517 518
3980 3982
3526 3527
1638 1639
2597 2599
2880 2880
2106 2106
831 832
3680 3680
3645 3646
1602 1602
1175 1175
3701 3702
3353 3353
1613 1614
1540 1540
3191 3191
730 733
1685 1686
665 665
1036 1036
3388 3389
1223 1223
722 722
3204 3205
1001 1001
3869 3869
2251 2251
402 403
1393 1393
1843 1845
3614 3614
379 379
3654 3656
1664 1664
440 442
1955 1955
3207 3207
3261 3263
575 576
1145 1146
2520 2523
283 283
3905 3905
1818 1820
2556 2556
1642 1642
2095 2095
2465 2466
3649 3653
1586 1588
502 502
1234 1234
3788 3789
2724 2725
797 798
371 372
653 655
418 418
3761 3761
2338 2339
873 873
759 760
3764 3765
1708 1709
1340 1340
1102 1102
611 612
538 540
1170 1170
410 410
1071 1072
2987 2988
1593 1594
3971 3972
2111 2111
3692 3692
3523 3524
3781 3782
2143 2143
3711 3711
3821 3821
1300 1300
2447 2447
1498 1499
2716 2717
1924 1926
1545 1545
1196 1197
970 970
3630 3630
2444 2444
627 628
600 600
208 209
3054 3055
2696 2698
377 377
631 631
3418 3419
3465 3465
2139 2140
603 604
1536 1536
914 914
2135 2135
1083 1083
597 598
3909 3909
3147 3147
1696 1700
754 754
2852 2852
318 318
2571 2571
1277 1277
3982 3982
2676 2676
1106 1107
3048 3049
636 636
758 758
2846 2846
2881 2882
513 513
2647 2647
1660 1661
1454 1454
726 726
1291 1294
386 387
918 918
499 499
1081 1081
2038 2038
3404 3404
2493 2493
498 501
242 242
3905 3905
3552 3553
1870 1871
3855 3856
1099 1099
73 73
2611 2611
2701 2702
2067 2068
3693 3694
1037 1038
197 198
3817 3817
676 676
879 879
150 151
474 474
2407 2407
460 463
2775 2775
1574 1574
3979 3980
3293 3293
3601 3601
154 155
3425 3425
2871 2872
3831 3832
1675 1678
2906 2910
3586 3586
147 147
3792 3793
842 842
1408 1408
812 812
3142 3143
2145 2145
1575 1576
3074 3074
768 768
693 693
3579 3579
2136 2137
1262 1262
1777 1782
3792 3792
1597 1597
2679 2679
2655 2655
199 199
3160 3161
2241 2242
2754 2754
1566 1566
911 913
2356 2357
525 526
43 44
2751 2751
2497 2497
2196 2198
1517 1518
931 933
1835 1836
2408 2408
194 195
74 74
1991 1992
3593 3594
1022 1023
3175 3175
3599 3600
3834 3834
2759 2760
3610 3612
1658 1658
1505 1506
1961 1962
530 530
638 640
1267 1267
2856 2857
1729 1735
3006 3006
1353 1355
695 695
2308 2308
2794 2795
1504 1504
3677 3677
1314 1315
2435 2435
323 323
272 273
2740 2741
1213 1215
2813 2813
443 444
2131 2131
2669 2670
883 883
488 489
2043 2044
1948 1948
1335 1335
3059 3061
69 69
3135 3135
417 417
2454 2455
160 160
2792 2793
3791 3791
39 40
3957 3958
1869 1869
2285 2287
1472 1473
3209 3210
402 402
2030 2031
854 854
490 490
2679 2679
107 110
3937 3938
711 712
458 458
13 13
2359 2359
3678 3679
2121 2121
3640 3641
156 156
2695 2695
3542 3543
3807 3807
757 757
507 508
3449 3451
553 554
1422 1422
577 577
1100 1100
778 778
1665 1665
132 132
2738 2738
2346 2347
813 813
1666 1666
2309 2310
2089 2090
1649 1650
2647 2648
3698 3699
1051 1053
3323 3326
1462 1462
3307 3307
2970 2970
1925 1926
828 828
645 645
483 484
779 779
2261 2261
3049 3049
1356 1357
200 201
1324 1325
2508 2508
1201 1203
938 939
3754 3755
564 566
785 786
3994 3998
1191 1191
3729 3729
3301 3301
374 374
707 707
256 256
3462 3462
1805 1805
3910 3911
2217 2217
3357 3358
1169 1170
345 345
86 87
3977 3977
3226 3226
26 26
2347 2348
2757 2757
97 99
2244 2244
1541 1543
1250 1251
2651 2651
1800 1802
1117 1117
1879 1880
2231 2231
3595 3596
2403 2403
3918 3919
3414 3415
1168 1169
2680 2680
3916 3917
2833 2834
3319 3320
427 429
1947 1947
3050 3051
622 625
1842 1846
82 83
219 219
3506 3508
2544 2545
1576 1577
3858 3858
1550 1550
2151 2152
2271 2271
3940 3943
3545 3545
1791 1795
2684 2684
3866 3867
429 432
182 183
1072 1072
2109 2110
226 226
3090 3090
448 448
2641 2642
225 225
3397 3398
715 717
3009 3011
1639 1639
3745 3745
609 610
1825 1825
3291 3291
404 405
1372 1372
2699 2699
2490 2491
1375 1377
2304 2304
2768 2768
3030 3031
1155 1157
802 804
1599 1601
3967 3967
494 497
3961 3961
1664 1664
1583 1583
16 16
3078 3080
1467 1469
980 981
704 705
441 441
3606 3606
170 170
2485 2486
45 45
506 506
3332 3333
2091 2091
479 480
3729 3729
2553 2553
3032 3037
1870 1870
1064 1064
1812 1812
3073 3073
853 853
838 841
2548 2549
836 836
812 812
2478 2479
1959 1960
3566 3566
689 689
1124 1126
3477 3477
2906 2906
84 87
2563 2563
2898 2901
2897 2898
1123 1123
1180 1182
991 992
1433 1434
2949 2951
464 464
2762 2763
2299 2299
2355 2355
1946 1949
3573 3574
3730 3730
323 325
688 688
1996 1996
3224 3225
2213 2213
2478 2480
1311 1312
196 196
1535 1535
2070 2070
2213 2215
541 541
1837 1839
2207 2207
3164 3165
1630 1630
3095 3098
626 626
3411 3412
2550 2552
2083 2084
306 308
193 193
2583 2583
3182 3183
3830 3830
3818 3820
3918 3918
635 635
1544 1544
2076 2076
3585 3585
3210 3212
1641 1641
3922 3923
1208 1208
3644 3644
970 971
1235 1235
865 865
3415 3416
1252 1254
1644 1645
2593 2593
1182 1184
1406 1407
29 29
3685 3685
3705 3706
3162 3163
29 30
2484 2484
1171 1172
2729 2730
776 777
1848 1849
3052 3057
1993 1993
3713 3713
1618 1619
1129 1130
3861 3861
814 815
1235 1237
1327 1328
2456 2457
2370 2370
2515 2515
2655 2658
3236 3236
3896 3896
1284 1284
1036 1036
2689 2690
951 951
3104 3105
123 125
3981 3981
2481 2481
2099 2099
407 407
3763 3763
3335 3336
856 856
3255 3256
794 794
226 227
1413 1414
2812 2816
3643 3643
2325 2325
468 469
2013 2015
2735 2737
1293 1293
271 271
3259 3262
2054 2058
1467 1467
3688 3688
339 339
3154 3154
3399 3399
1052 1052
3696 3697
3290 3291
278 279
1761 1761
1619 1620
1158 1158
187 187
562 563
2182 2183
1655 1655
3738 3739
2845 2845
1305 1306
3081 3082
3683 3685
1581 1583
2459 2459
3378 3378
284 287
3444 3444
3169 3169
1122 1122
3039 3040
3801 3802
1507 1507
3110 3111
3466 3466
3931 3932
3762 3762
1858 1858
3484 3485
941 941
1151 1151
713 714
3599 3599
3951 3951
1147 1149
3577 3579
1621 1622
696 696
607 607
2766 2766
1092 1092
127 128
3010 3012
2496 2496
3795 3796
72 72
814 815
1161 1164
11 14
1225 1227
3533 3534
194 194
2945 2945
1830 1831
2657 2658
1546 1549
3671 3671
648 650
3452 3453
1635 1635
2996 2997
1920 1920
3380 3381
423 423
1013 1014
2373 2373
1568 1570
3175 3175
1130 1130
1670 1671
3050 3050
1643 1643
1277 1277
3053 3053
933 934
304 304
2819 2820
2973 2973
79 79
829 829
2126 2127
1832 1832
2616 2616
265 266
1663 1663
2448 2448
2561 2561
2633 2633
1762 1764
379 380
3144 3144
326 326
3254 3254
2659 2659
3885 3886
3200 3200
1758 1759
2879 2879
3722 3724
3540 3540
770 771
3972 3972
1896 1896
3610 3610
3063 3064
1617 1617
808 809
104 104
3640 3641
91 92
3512 3513
1384 1384
2844 2845
718 718
2439 2439
1481 1482
3325 3328
3278 3278
675 675
119 120
3892 3893
1940 1940
2672 2672
2600 2602
1929 1929
735 735
1532 1532
2991 2993
1382 1383
3647 3648
2042 2042
3845 3845
3477 3478
2124 2124
3421 3422
3455 3455
3590 3591
1813 1813
781 784
3613 3613
678 678
2887 2888
3216 3217
160 160
414 415
2487 2487
3085 3086
1271 1271
158 158
1195 1197
2761 2761
2666 2666
822 823
889 891
969 969
2049 2050
1901 1903
3429 3430
1669 1669
378 378
523 524
3865 3865
3900 3900
327 327
2026 2027
3172 3172
1716 1717
2929 2930
172 173
558 561
1803 1804
1609 1610
3813 3813
3973 3973
2252 2253
798 798
119 120
1528 1528
1460 1461
3989 3990
3182 3182
2394 2394
1273 1273
2847 2848
1394 1394
2258 2259
3245 3246
3730 3730
2502 2502
1967 1973
525 525
2917 2919
2321 2323
487 487
2744 2744
3569 3569
1242 1244
3728 3728
3297 3297
3005 3005
228 229
2570 2570
2233 2233
2723 2723
2760 2760
665 665
1295 1296
1137 1137
527 528
2025 2025
2863 2864
3812 3812
3821 3821
516 517
439 440
3246 3247
3251 3251
2046 2047
1434 1435
3359 3360
3899 3899
3655 3657
963 963
2331 2332
3067 3068
1906 1907
2555 2555
299 300
1370 1370
2522 2523
1775 1775
2890 2891
1240 1241
1837 1838
3935 3938
2567 2568
3707 3707
3759 3759
2490 2491
1446 1446
3534 3534
2878 2878
3386 3387
155 159
2045 2045
1516 1517
2955 2955
1738 1739
3232 3232
996 997
3037 3037
3285 3285
2978 2979
897 897
1683 1683
2260 2260
3193 3193
1854 1855
1216 1216
3083 3083
621 622
1053 1053
1789 1790
2069 2069
2267 2267
259 259
2566 2566
321 321
1189 1190
1062 1062
3335 3336
3296 3296
2753 2753
2547 2547
3214 3214
2314 2314
892 893
3243 3243
2298 2298
1703 1703
3090 3090
1701 1701
2345 2345
233 233
3224 3226
2610 2611
3976 3976
1395 1397
39 40
3442 3443
503 504
934 934
388 388
1672 1672
2434 2434
2530 2531
1627 1627
3650 3651
1480 1480
188 188
3666 3667
3544 3544
886 886
2831 2831
2159 2160
1190 1191
3825 3825
599 599
438 438
825 825
1853 1853
1938 1938
1217 1219
189 191
195 195
2535 2536
3147 3148
2839 2840
201 201
1531 1532
3897 3898
2546 2546
483 483
1113 1114
2079 2081
2448 2448
2860 2860
3272 3272
335 336
342 342
1054 1056
2578 2578
2529 2529
2116 2116
3483 3483
3362 3362
726 726
2864 2866
2075 2075
2682 2682
1425 1426
509 509
2223 2224
396 396
2894 2895
1193 1194
1538 1538
1382 1382
2587 2588
1646 1647
3218 3220
755 755
3875 3875
1039 1039
3463 3463
3991 3991
2931 2932
894 895
3572 3572
1993 1993
3681 3682
759 762
2934 2934
1616 1616
3242 3243
3173 3173
2857 2859
317 317
1267 1267
3577 3578
2632 2632
3907 3907
1291 1291
1333 1333
2637 2638
1740 1740
1725 1726
139 140
2956 2956
1384 1384
3237 3237
2711 2712
2312 2313
113 113
3192 3192
2797 2797
1027 1027
2248 2249
3420 3420
1799 1800
3279 3280
1623 1623
3275 3278
466 469
2673 2673
1524 1524
1628 1628
3847 3848
3644 3644
305 305
362 362
885 885
1478 1479
828 829
2401 2401
616 616
1957 1958
1361 1361
24 25
2446 2446
3686 3686
2970 2970
1419 1419
1773 1773
3563 3563
3617 3617
3587 3588
1103 1103
912 912
3741 3742
311 311
1311 1312
1832 1833
381 381
3891 3891
142 142
1842 1842
3093 3094
2002 2004
3176 3177
2721 2721
983 986
947 948
3963 3963
1005 1005
3547 3548
765 766
1736 1736
1667 1668
3608 3608
2965 2966
2415 2415
1465 1465
3313 3313
684 684
513 513
2390 2391
3017 3017
410 410
2439 2440
1176 1177
3431 3432
262 262
682 683
3221 3222
3851 3852
825 827
392 392
3341 3342
381 383
3818 3818
2509 2509
2419 2421
1779 1779
2512 2512
677 679
3091 3092
2741 2742
2920 2921
2295 2295
3456 3457
3023 3024
2275 2276
3007 3008
2020 2020
1657 1657
1989 1989
2082 2083
2144 2144
2240 2240
2669 2669
1398 1398
2212 2212
3969 3969
3155 3155
118 118
3668 3668
1457 1459
1693 1693
1420 1421
2172 2173
3947 3949
1687 1687
638 638
2133 2133
3846 3846
1353 1354
2296 2296
2310 2310
2709 2710
1611 1612
1056 1059
2007 2008
1812 1814
2664 2665
523 523
1553 1555
956 956
3340 3340
1256 1257
3764 3765
2915 2916
1492 1492
401 401
3082 3082
3075 3075
3108 3108
407 407
2392 2392
2247 2248
3122 3123
971 971
733 734
2125 2126
1787 1789
3058 3058
1587 1587
2873 2874
104 106
507 508
1165 1167
2032 2037
2254 2254
1522 1523
1921 1922
2710 2711
3438 3440
2911 2911
3652 3653
3689 3689
319 320
2085 2085
3605 3605
542 543
1118 1120
2582 2582
3814 3814
847 847
2276 2276
3097 3097
807 807
1032 1032
3997 3997
0 1
2164 2164
3822 3823
375 376
1557 1558
2681 2681
1680 1680
3059 3059
2367 2369
1345 1346
2745 2747
3977 3978
2101 2102
2636 2636
3799 3800
3083 3084
2453 2453
930 930
840 840
225 225
2821 2823
3194 3195
3508 3508
2117 2118
2029 2029
2661 2661
1261 1261
1821 1824
1436 1437
1594 1594
3553 3555
2913 2913
3297 3297
2201 2201
3270 3272
2824 2824
626 626
854 855
3556 3556
593 594
2750 2750
1308 1308
3466 3467
1456 1458
3428 3429
865 865
1275 1276
1496 1497
976 977
3860 3860
1856 1857
553 554
3925 3926
1307 1310
3575 3575
1510 1510
1297 1297
3337 3337
1495 1495
1722 1722
588 591
3070 3072
2680 2680
2887 2889
1749 1749
1618 1618
2257 2257
171 173
1391 1392
3921 3924
3379 3379
3736 3740
2788 2790
746 746
1423 1423
1522 1523
3731 3734
3809 3810
1470 1471
3840 3840
3710 3711
435 435
761 761
3248 3249
3079 3079
2555 2555
2787 2787
635 635
3709 3710
641 642
2352 2352
768 772
2872 2872
2510 2511
445 445
2799 2799
1536 1539
129 129
1659 1659
2326 2326
3479 3479
241 243
967 968
1974 1980
1411 1411
1379 1381
2409 2409
1688 1688
2971 2971
3213 3213
2306 2306
883 883
3186 3186
2513 2514
3823 3824
1385 1386
3488 3488
3394 3395
859 860
3151 3151
2559 2559
2094 2094
531 531
1329 1329
1767 1767
2807 2807
1945 1945
3957 3958
3111 3111
908 908
2875 2876
1715 1715
3312 3312
3080 3080
366 367
2837 2838
3670 3670
2546 2546
1875 1877
2239 2239
1780 1781
595 597
2343 2344
606 606
1865 1865
3718 3718
3367 3367
453 453
116 116
3933 3933
3753 3755
1178 1179
2065 2065
2426 2426
1653 1653
1466 1466
2540 2540
3454 3455
2787 2788
755 755
1474 1475
3489 3489
2883 2883
624 624
2280 2281
3953 3954
3614 3615
1417 1419
2993 2994
3521 3522
3833 3833
368 368
272 274
562 562
191 192
739 740
2109 2109
3836 3838
1752 1754
2971 2973
565 565
1927 1928
677 677
367 367
1809 1809
2107 2108
3853 3856
3752 3753
1912 1913
1033 1033
2272 2272
3447 3447
161 164
3248 3249
1234 1234
668 668
2440 2440
1136 1138
2185 2185
3024 3025
1953 1954
1684 1684
3178 3180
2371 2372
2508 2508
1936 1937
2214 2216
3979 3979
1336 1337
2373 2373
2225 2225
1610 1610
60 60
1316 1317
373 373
884 884
1768 1769
2382 2384
2954 2954
2633 2634
3878 3878
202 202
3567 3567
267 268
2191 2193
1629 1629
994 999
134 136
209 209
3317 3318
898 898
2316 2318
165 168
2325 2326
1030 1031
2464 2464
649 649
1084 1086
2598 2599
23 25
2911 2912
1173 1174
1500 1500
569 569
2678 2678
3267 3269
1571 1574
1797 1798
212 212
2040 2040
2917 2917
2492 2492
3519 3520
2734 2736
3642 3643
538 540
88 89
2639 2640
3952 3952
2832 2832
3356 3356
2394 2394
2509 2510
2473 2474
602 602
3771 3772
1210 1210
2485 2485
3903 3903
3447 3447
215 215
1516 1516
2016 2016
2019 2019
2612 2612
2123 2123
3369 3370
3114 3115
776 776
462 464
2221 2222
547 547
3101 3101
3502 3503
1571 1572
1669 1669
406 406
749 749
998 998
2744 2744
958 958
1044 1044
2748 2748
593 593
1659 1659
1733 1733
1849 1851
687 687
952 954
3362 3363
995 995
2301 2302
2714 2721
3583 3583
2433 2433
1530 1530
5 5
2066 2066
3658 3659
3310 3310
653 654
2891 2891
2794 2795
2066 2068
906 906
1015 1017
599 599
1584 1585
457 458
2974 2974
3426 3428
1994 1994
1121 1121
2867 2867
2341 2341
1451 1452
1096 1096
3274 3274
3788 3788
1607 1607
978 978
3562 3562
3819 3819
911 911
3497 3499
1679 1679
3102 3102
3964 3966
2630 2632
3339 3339
1741 1742
1338 1339
368 369
1483 1484
669 670
3489 3490
1831 1831
2667 2668
2709 2709
3565 3565
1109 1109
2170 2172
1903 1903
3850 3851
3983 3984
1694 1694
2431 2432
3352 3353
1378 1381
596 596
2559 2561
1217 1219
489 490
925 927
2237 2237
1808 1808
1046 1046
3197 3197
860 860
806 806
3847 3847
3775 3777
3941 3941
690 691
3602 3602
659 661
2251 2253
2511 2511
3354 3354
986 987
3141 3141
3683 3683
1671 1672
793 793
90 91
2524 2527
3778 3779
136 138
2884 2886
704 707
2348 2348
1688 1688
2991 2991
3235 3235
3464 3465
51 52
2173 2173
332 333
3355 3355
50 50
3117 3118
2249 2249
3735 3735
2429 2430
2089 2089
3487 3488
3342 3342
2739 2740
3748 3748
2790 2790
2307 2307
3453 3454
1805 1805
2988 2988
643 643
1313 1313
1371 1373
910 910
3936 3936
1018 1019
3511 3511
1017 1018
767 767
3458 3458
392 393
3571 3571
1656 1657
2998 2999
1456 1456
2359 2359
1046 1047
745 745
1420 1420
3315 3315
3164 3166
868 868
477 478
1015 1016
291 291
3444 3444
1706 1707
2304 2304
3749 3750
2643 2643
1131 1131
2856 2856
3039 3040
620 620
1229 1231
3778 3779
2551 2551
3538 3539
3417 3418
3901 3901
2956 2959
846 846
1847 1847
3942 3942
2749 2750
3506 3506
2300 2300
3484 3485
263 264
3396 3396
2903 2903
1632 1632
2202 2202
3480 3480
2297 2297
1370 1371
3669 3669
2036 2036
2017 2017
1362 1362
1201 1201
3806 3806
2652 2652
170 170
2229 2230
746 747
3146 3146
287 287
2410 2411
3767 3769
1087 1087
1094 1095
2804 2804
2641 2641
3084 3084
3398 3398
2337 2337
3020 3020
2506 2507
6 7
1003 1003
2277 2280
3207 3207
1743 1745
1024 1024
799 801
1393 1393
591 592
3787 3787
3208 3208
3705 3708
133 133
1301 1303
2268 2268
666 667
881 881
2569 2570
505 506
2671 2671
1794 1795
734 734
1233 1233
1601 1603
935 937
990 990
2505 2506
870 877
3690 3691
1951 1951
614 615
2034 2035
131 131
31 34
2835 2835
126 126
1811 1811
3573 3574
869 871
184 186
531 532
1294 1294
282 283
325 326
1935 1935
862 862
3026 3027
111 112
1321 1321
397 399
841 841
2866 2868
742 742
2592 2592
3849 3849"""
        output = """NO"""
        self.assertIO(input, output)

if __name__ == "__main__":
    unittest.main()